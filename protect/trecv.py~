#!/usr/bin/env python
#coding=utf-8
import paho.mqtt.client as mqtt
import time
import redis

attr = {}
attrlist = ["rc", "rp", "rep", "rao"]
total_conn = 0
miu = 1.1
alpha = [0.225, 0.2875, 0.3, 0.1875]
beta = 9
delta = 2
k = 10
evi = [2, 1, 1, 1]

def check_protocol(payload):
    if payload[0:3] == "A3B3":
	return True;
    else:
	return False;

def on_connect(client, userdata, flags, rc):
    print ("Connected with result code "+ str(rc))
    client.subscribe("/protect/#")
    client.subscribe("/total_conn")

def on_message(client, userdata, msg):
    print (msg.topic + " " + str(msg.payload))
    if msg.topic == "/total_conn":
        total_conn += 1
    else:
        topics = msg.topic.split("/")
        topic_type = topics[-2]
        username = topics[-1]
        userexist = False
	if username == "" or username == "zhouyao":
	    pass
	else:
        if attr.has_key(username):
	   pass
	else:
	    attt[username] = [0]*5 #rc,rp,rep,rao,uas
	for i in rage(4):
	    if topic_type == attrlist[i]:
		if i != 3:
		    freq = int(msg.payload)
		    attr[username][i] = attr[username][i] + freq
		else:
		    if check_protocol(str(msg.payload)):
			pass
		    else:
			attr[username][i] += 1
		break

    
def main():	

    
    client = mqtt.Client("recv_client", True)
    client.username_pw_set("zhouyao", "123456")

    client.on_connect = on_connect
    client.on_message = on_message

    host = "127.0.0.1"

    client.connect (host, 1883, 60)

    last_update_time = int(time.time())
    interval = 5*60

    while True:
	now = int(time.time())
	if now - last_update_time > interval:
	    div_interval = now - last_update_time
	    
	    log = open("output", 'wa')
	    for key in attr.keys():
		attr[key][-1] = 0
		for i in range(4):
		    afreq = attr[key][i]/div_interval
		    if afreq <= 3:
			attr[key][i] = 1
		    else:
			attr[key][i] = math.atan((afreq - 0)/evi[i] + delta))*beta
		    attr[key][-1] += alpha[i]*attr[key][i]
		attr[key][-1] = miu*attr[key][-1]
		
		log.write("name:%s score:%s" % (key, attr[key][-1]))
		attr[key] = [0]*5

	    last_update_time = now
	    log.close()
	
    

if __name__ == "__main__":
    main()

